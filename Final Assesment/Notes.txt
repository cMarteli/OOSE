Notes.txt

/** poll() method - incoming messages **/

// program must call poll() to receive comms from responders
// will return all comms received since last called
// will usually be empty or have one string but may have multiple
//eg. flood rescuers arrive in midtown
	flood + Midtown
//eg2. chemical cleanup crews have left Westtown
	chemical - Westtown
// format: 
	end|(fire|flood|chemical) [+-] .+
//('+' means arrival a '-' means departure) (.+ means any string. it's for the location)
// a special string containing the word "end" can be sent also
//eg3.
	end
// this notifies the entire simulation to shut down
// any invalid message should be logged without stopping the sim


/** send() method - status events **/

// notifies responders of events in the simulation
//eg. flood in Midtown is over
	flood end Midtown
//eg2. fire in Hill Valley is now low-intensity
	fire low Hill Valley
// format:
	(fire|flood|chemical) (start|end|low|high) .+
//(low and high are only for fires) (.+ means any string. it's for the location)
	

// Loss Events - (Hospitalization, Propert dmg or environmental contamination)
//eg. New Person hospitalized due fire in Midtown, injury tally is now 2 (this event)
fire casualty 2 Midtown
//eg2. New Property damaged due to flood in Hill valley, prprty dmg tally is now 3 (this event)


TODO:

store time each responder is on the job
make so user is informed when jobs end - Done! 
add the ability for events to increase in size or dissipate


***** Remember *****
- Use logger
- Periodically check with PMD linting tool "./gradlew check"
- Create a UML state chart(s)!!
- Marking criteria file! (Use stuff from this file)
*******************

**Design notes**

Observer pattern:

The subject are the events themselves in this case the event class. As the observer wants to be notified of changes to the that classes fields
(damage, contamination, status).

Observers are the ones who receive notifications of new events as they occur Simulation is one of them, as it needs to send the Respondercomm
notice of any changes. However any other class may extend the observer interface if needed and simply call the .register() method of the Observer class
to receive updates of any certain event. This may be only the events the Observer is interested on. So for example if a firefighter would like to subcribe to
only fire events they could easily do so.

Explanation of Generics:
Event notifier interface takes in a generic instead of Event.
This was done to decouple the class from needing a specific 'Event' class if future implementations of the software choose to utilise another class (such as string). This removes need to refactor the interface as only the implementation is affected. This is important for compatibility.

Only interfaces are directly referecended between classes.

fileIO.java originally instantiated the EventNotifierImpl (the concrete class of the EventNotifier interface) 
it also instantiated the Event.java class and used the EventNotiferImpl.add(Event e) method to add to the list of Events.
This was later changed to simply return a list of events. Events was kept as a sole dependancy so fileIO can check if the file is valid for the object
type.

Dependency injection:
Originally the simulation class had all files instantiated in the constructor.
To enable easier unit testing and implement Dependency Injection I decided to use my Main class as a bootstrap that instantiates
all objects relevant to the simulation and injects it into the constructor of the simulator class.

This solution did not require the use of factory methods, and for code simplicity sake I've elected not to implement them as the purpose of easier testing was achieved.

State Pattern:
The event class not only extends Observer but also EventState.
Event state, has methods which are called by other classes representing the state an emergency can be in at any point.
These include: FireLow, FireHigh, Chemical, Flood.
These classes and the interfaces themselves have all been put into the package "emergencysim.events"

