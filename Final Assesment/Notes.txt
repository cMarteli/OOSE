Notes.txt

/** poll() method - incoming messages **/

// program must call poll() to receive comms from responders
// will return all comms received since last called
// will usually be empty or have one string but may have multiple
//eg. flood rescuers arrive in midtown
	flood + Midtown
//eg2. chemical cleanup crews have left Westtown
	chemical - Westtown
// format: 
	end|(fire|flood|chemical) [+-] .+
//('+' means arrival a '-' means departure) (.+ means any string. it's for the location)
// a special string containing the word "end" can be sent also
//eg3.
	end
// this notifies the entire simulation to shut down
// any invalid message should be logged without stopping the sim


/** send() method - status events **/

// notifies responders of events in the simulation
//eg. flood in Midtown is over
	flood end Midtown
//eg2. fire in Hill Valley is now low-intensity
	fire low Hill Valley
// format:
	(fire|flood|chemical) (start|end|low|high) .+
//(low and high are only for fires) (.+ means any string. it's for the location)
	

// Loss Events - (Hospitalization, Propert dmg or environmental contamination)
//eg. New Person hospitalized due fire in Midtown, injury tally is now 2 (this event)
fire casualty 2 Midtown
//eg2. New Property damaged due to flood in Hill valley, prprty dmg tally is now 3 (this event)


TODO:

store time each responder is on the job
make so user is informed when jobs end
add the ability for events to increase in size or dissipate


remember:
-use logger
-periodically check with PMD linting tool "./gradlew check"


**Design notes**

Observer pattern:

Observers are the ones who receive notifications of new events as they occur
in this case Rescuers (usually has an update method, in our case "send" and "poll")

Subject is what is being observed (event notifier?) and they may have an event subclass which hold the info of events (event)

Explanation of Generics:
Event notifier interface takes in a generic instead of Event.
This was done to decouple the class from needing a specific 'Event' class if future implementations of the software choose to utilise another class (such as string). This removes need to refactor the interface as only the implementation is affected. This is important for compatibility.

Only interfaces are directly referecended between classes.

fileIO.java originally instantiated the EventNotifierImpl (the concrete class of the EventNotifier interface) it also instantiated the Event.java class and used the EventNotiferImpl.add(Event e) method to add to the list of Events.

This was completely changed to loosen coupling and decrease dependencies.
fileIO now takes a generic parameter and an additional overloaded version of .add() was created to take in strings and integers as parameters so the implementation of the interface can handle the creation of the new events. 
This way fileIO.java does not need to know of the existence of Event.java or the EventNotifierImpl only the interface.

Dependency injection: Add to Simulation class